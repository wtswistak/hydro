// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  password        String
  emailVerified   Boolean  @default(false) @map("email_verified")
  banned          Boolean  @default(false)
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  tokens Token[]
  emailVerifications EmailVerification[]
  wallets Wallet[]

  @@map("user")
}

model Wallet {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  address         String   @unique
  privateKey      String   @map("private_key")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt       DateTime? @map("deleted_at")
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions Transaction[]

  @@map("wallet")
}

model Token {
  id         Int       @id @default(autoincrement())
  userId     Int       @map("user_id")
  token      String    @unique
  expiresAt  DateTime  @map("expires_at")
  revokedAt  DateTime? @map("revoked_at")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("token")
}

model EmailVerification {
  id         Int       @id @default(autoincrement())
  userId     Int       @map("user_id")
  token      String    @unique
  used       Boolean   @default(false)
  usedAt     DateTime?
  expiresAt  DateTime  @map("expires_at")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification")
}

model Transaction {
  id              Int                   @id @default(autoincrement())
  walletId        Int                   @map("wallet_id")
  amount          Decimal
  status          TransactionStatus     @default(PENDING)
  receiverAddress String
  hash            String                @unique
  chainId         BigInt
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)

  wallet     Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("transaction")
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAIL
}