// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  password        String
  emailVerified   Boolean  @default(false) @map("email_verified")
  banned          Boolean  @default(false)
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  sessionTokens SessionToken[]
  emailVerifications EmailVerification[]
  wallets Wallet[]

  @@map("user")
}

model Wallet {
  id              Int       @id @default(autoincrement())
  userId          Int       @map("user_id")
  address         String    @unique
  privateKey      String    @map("private_key")
  blockchainId    Int       @map("blockchain_id")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt       DateTime? @map("deleted_at")

  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  blockchain      Blockchain @relation(fields: [blockchainId], references: [id], onDelete: Cascade)
  balances        Balance[]

  @@map("wallet")
}

model SessionToken {
  id         Int       @id @default(autoincrement())
  userId     Int       @map("user_id")
  token      String    @unique
  expiresAt  DateTime  @map("expires_at")
  revokedAt  DateTime? @map("revoked_at")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session_token")
}

model EmailVerification {
  id         Int       @id @default(autoincrement())
  userId     Int       @map("user_id")
  token      String    @unique
  used       Boolean   @default(false)
  usedAt     DateTime?
  expiresAt  DateTime  @map("expires_at")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification")
}

model Transaction {
  id                Int                   @id @default(autoincrement())
  amount            Decimal               @db.Decimal(36, 18)
  senderAddress     String                @map("sender_address")
  receiverAddress   String                @map("receiver_address")
  senderBalanceId   Int?                  @map("sender_balance_id")
  receiverBalanceId Int?                  @map("receiver_balance_id")
  status            TransactionStatus     @default(PENDING)
  hash              String?               @unique
  nonce             Int?
  gasLimit          BigInt?               @map("gas_limit")
  gasPrice          BigInt?               @map("gas_price")
  gasUsed           BigInt?               @map("gas_used")
  cryptoFee         Decimal?              @map("crypto_fee")
  fiatFee           Decimal?              @map("fiat_fee")
  blockNumber       Int?                  @map("block_number")
  createdAt         DateTime              @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt         DateTime              @updatedAt @map("updated_at") @db.Timestamptz(3)
  senderBalance     Balance?              @relation("Sender", fields: [senderBalanceId], references: [id])
  receiverBalance   Balance?              @relation("Receiver", fields: [receiverBalanceId], references: [id])

  @@map("transaction")
}

model Balance {
  id                  Int                   @id @default(autoincrement())
  walletId            Int                   @map("wallet_id")
  cryptoTokenId       Int                   @map("cryptoToken_id")
  amount              Decimal @db.Decimal(36, 18)       @default(0)
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt           DateTime              @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt           DateTime?             @map("deleted_at")

  wallet               Wallet               @relation(fields: [walletId], references: [id], onDelete: Cascade)
  cryptoToken          CryptoToken          @relation(fields: [cryptoTokenId], references: [id], onDelete: Cascade)
  senderTransactions  Transaction[]         @relation("Sender")
  receiverTransactions Transaction[]        @relation("Receiver")

  @@unique([walletId, cryptoTokenId])
  @@map("balance")
}

model CryptoToken {
  id              Int                @id @default(autoincrement())
  symbol          String             @unique
  name            String             @unique
  contractAddress String?            @unique @map("contract_address")
  blockchainId    Int                @map("blockchain_id")
  decimals        Int
  createdAt       DateTime           @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime           @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt       DateTime?          @map("deleted_at")

  balances        Balance[]
  blockchain      Blockchain         @relation(fields: [blockchainId], references: [id], onDelete: Cascade)

  @@map("crypto_token")
}

model Blockchain {
  id              Int        @id @default(autoincrement()) 
  name            String     @unique                      
  chainId         BigInt     @unique @map("chain_id")                      
  nativeSymbol    String     @map("native_symbol")                               
  createdAt       DateTime   @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime   @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt       DateTime?  @map("deleted_at")

  wallets        Wallet[]
  cryptoTokens   CryptoToken[]

  @@map("blockchain")
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAIL
}